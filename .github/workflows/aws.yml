name: Build and Deploy to AWS ECR and ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build Application
        run: mvn clean package -DskipTests

      - name: Debug File Structure
        run: ls -R

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image
        env:
          ECR_REGISTRY: 783764588682.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: hello-java
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-ecs:
    name: Deploy to Amazon ECS
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Register New Task Definition Revision (Fargate)
        id: register-task-def
        run: |
          # Define the container definition with the new Docker image
          container_def=$(cat <<-EOF
          [
            {
              "name": "java-1",
              "image": "783764588682.dkr.ecr.us-east-1.amazonaws.com/hello-java:${{ github.sha }}",
              "memory": 512,
              "cpu": 256,
              "essential": true
            }
          ]
          EOF
          )
          
          # Register the new task definition for Fargate (with awsvpc network mode)
          new_task_def_arn=$(aws ecs register-task-definition \
            --family test \
            --network-mode awsvpc \
            --cpu "256" \
            --memory "512" \
            --container-definitions "$container_def" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "New Task Definition ARN: $new_task_def_arn"
          echo "TASK_DEFINITION_ARN=$new_task_def_arn" >> $GITHUB_ENV  # Set the ARN using the GitHub environment file

      - name: Create New ECS Service (Fargate)
        run: |
          # Create a new ECS service using the new task definition for Fargate
          aws ecs create-service \
            --cluster dev \
            --service-name my-new-service \
            --task-definition ${{ env.TASK_DEFINITION_ARN }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-07a8478ec077d9e68],securityGroups=[terraform-sg20250116122527047800000001],assignPublicIp=ENABLED}"

      - name: Update ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ env.TASK_DEFINITION_ARN }}  # Pass the ARN from environment file
          service: my-new-service  # Use the new service name
          cluster: dev
          wait-for-service-stability: true
        env:
          AWS_REGION: us-east-1

      - name: Confirm Deployment
        run: echo "Deployment to ECS service 'my-new-service' on cluster 'dev' is complete."
